/* ************************************************************************** */
/** @file [Cradle.c]
 *  @brief {support interface to communicate with Cradle to get 
 * information, and control, report error if occur during communication}
 *  @author {nguyen truong}
 */
/* ************************************************************************** */


/* This section lists the other files that are included in this file.
 */

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdlib.h>
#include <float.h>
#include <string.h>

#include "FreeRTOS.h"
#include "semphr.h"
#include "queue.h"

#include "system_config.h"
#include "system_definitions.h"
#include "Delay.h"

#include "ApplicationDefinition.h"
#include "I2C_2.h"
#include "Cradle.h"
#include "ADC.h"



//#include "AlarmInterface.h"
//#include "ApplicationDefinition.h"

typedef enum{
    eCradleWriteRqst,
    eCradleReadRqst,
    eCradleErrorState, 
}E_CradleRequestState;

typedef enum
{
    //Set serial number for cradle
    eSetCradleSN = 0x01,
    eGetCradleSN = 0x02,
    eGetBatteryConnection = 0x03,
    eGetBatteryRemainingCapacity = 0x04,
    eGetBatteryStatus = 0x05,
    eGetBatteryAverageCurrent = 0x06,      
    eGetBatteryVoltage = 0x07,
    eSetWaterSupplyOnOff = 0x08,       
    eSetPowerSupplyOnOff = 0x09,            
} E_CRADLE_CMD;



typedef enum
{
    //System do not detect any error
    eNoError = 0x00,  
    //Received command is not supported
    eUnsupportedCommand = 0x01,
    //Received command is not supported        
    eInvalidData = 0x02,
    //System detected that Error occurred in data transfer etc
    eCRCErr = 0x03,
    
    //Required to get the SN when the SN is not Set
    eSNIsNotSet = 0x10,
    
    //System detected that the battery lid has been opened        
    eBatteryLidWasOpened = 0x11,
            
    eInternalErr = 0xFF	,
                      
} E_CRADLE_ERR;

    

        
#define ADDRESS_NUM_OF_BYTE   1
#define COMMAND_NUM_OF_BYTE   1
#define CRC_NUM_OF_BYTE       1
#define CRADLE_SERIAL_NUMBER_LENGTH       8 


#define POLYNOMIAL_CRC8    (0x31)      // 1 0000 0111 x8 + x2 + x1 + x0

/** @brief I2C slave address of cradle*/
#define CRADLE_BASE_ADDR                 0x08

/** @brief I2C address while writing data to cradle
 * write address = base address << 1 + write bit (0))
 */
#define CRADLE_WRITE_ADDR                (CRADLE_BASE_ADDR << 1)

/** @brief I2C address while reading data from cradle
 * read address = base address << 1 + read bit(1))
 */
#define CRADLE_READ_ADDR                 ((CRADLE_BASE_ADDR << 1) + 1)

/** @brief max time wait for charger communication (in ms) via I2C*/
#define CRADLE_COMM_MAX_WAIT_MS          (40 / portTICK_PERIOD_MS)

/** @brief size of buffer that store command sent to cradle */
#define     CRADLE_COMMAND_QUEUE_SIZE       (8)

/** @brief max time wait for send command to queue */
#define     QUEUE_CRADLE_COMMAND_WAITING     (2)


/** @brief a queue to store command sent to cradle */
static QueueHandle_t gs_CradleCommandQueue = NULL;

/** @brief store error state of the communication with cradle*/
static E_DeviceErrorState gs_communicationErr = eDeviceNoError;

static E_ConnectState gs_CradleConnection = eDisconnect;


static uint8_t gs_CradleSN[CRADLE_SERIAL_NUMBER_LENGTH] = {};
static E_ConnectState gs_CradleBatteryConnection = eDisconnect;
static uint16_t gs_CradleBatteryRemainCapacity = 0;
static uint16_t gs_CradleBatteryStatus = 0;
static int16_t gs_CradleBatteryAverageCurrent = 0;
static uint16_t gs_CradleBatteryVoltage = 0;
static E_OnOffState gs_WaterSupplyState = eOff;
static E_OnOffState gs_PowerSupplyState = eOff;

/** @brief current command to cradle */
static E_CRADLE_CMD gs_currentCommand = eGetCradleSN;


/** @brief Define the data packet type */
#define PACKET_TYPE_ACK             0xA1
#define PACKET_TYPE_NACK            0xA2
#define PACKET_TYPE_ACK_ABORT       0xA3
#define PACKET_TYPE_COMMAND         0xA4
#define PACKET_TYPE_DATA            0xA5
#define PACKET_TYPE_PING            0xA6
#define PACKET_TYPE_PING_RESPONSE   0xA7

#define START_PACKET                0x5A
#define MSB_CRC8                    (0x31)

#define READY_RECEIVE               0x0A
#define STOP_RECEIVE                0x0B
#define IN_BOOT                     0x0C
#define PROGRAM_DEVICE              0x0D
#define RECEIVED_BOOT_CMD           0x0E

// Define Master State
// Send ping indicate update firmware
#define MASTER_SEND_PING  0xE0
// Receive response from cradle
#define MASTER_RECEIVE_PING_RESPONSE  0xE1
// Receive ready in boot response
#define MASTER_WAIT_BOOT_RESPONSE   0xE2
// Send program device command
#define MASTER_PROGRAM_CMD   0xE3
// Receive ready response
#define MASTER_PROGRAM_CMD_RESPONSE  0xE4
// Send firmware
#define MASTER_SEND_DATA 0xE5
// Response received firmware from cradle
#define MASTER_RECEIVE_DATA_RESPONSE 0xE6
// Data error need to resend
#define MASTER_RESEND_DATA_SLAVE  0xE7

#define MASTER_RESEND_DATA_MASTER  0xEA

// End of updating firmware
#define MASTER_STOP_SEND 0xE8
// End of updating firmware
#define BOOT              0x42

/** @brief Define flag upgrade */
static bool s_sendCommandFlag = true;

/** @brief Define flag upgrade */
static uint32_t byteIndex = 0;

/** @brief Define flag upgrade */
static uint8_t sendBytes = 0;

/** @brief Define flag upgrade */
static uint8_t rxBuf[27] = {0};

/** @brief Define flag upgrade */
static uint8_t txBuf[27] = {0};

/** @brief Define flag upgrade */
static uint8_t MasterState = MASTER_SEND_PING; //MASTER_WAIT_BOOT_RESPONSE;

/** @brief Define flag upgrade */
static uint8_t PreMasterState = MASTER_SEND_PING; 

/** @brief Define flag upgrade */
static uint8_t err;

/** @brief Define flag upgrade */
static uint8_t cradle_CalCulateCRC8( const void *buff, size_t size );

/** @brief Define flag upgrade */
static uint8_t Cradle_Ascii2Hex(uint8_t c);





/** @brief create CRC8 
 *  @param [in]  const void *buff   
 *  @param [out]  None
 *  @return uint8_t
 *  @retval crc8: CRC of array
 */
static uint8_t cradle_GetCRC8( const void *buff, size_t size )
{
    uint8_t *p = (uint8_t *)buff;
    uint8_t crc8;
    uint8_t i;

    for ( crc8 = 0x00 ; size != 0 ; size-- )
    {
        crc8 ^= *p++;

        for ( i = 0 ; i < 8 ; i++ )
        {
            if ( crc8 & 0x80 )
            {
                crc8 <<= 1; crc8 ^= POLYNOMIAL_CRC8;
            }
            else
            {
                crc8 <<= 1;
            }
        }
    }
    return crc8;
}

/** @brief Initialize the cradle unit
 * This function should be called before RTOS is started and call 1 time only after
 * start up system
 *  @param [in]  None   
 *  @param [out]  None
 *  @return None
 */
void cradle_Initialize()
{
      //Create a queue capable of containing 8 items of command (uint8_t) 
      gs_CradleCommandQueue = xQueueCreate(CRADLE_COMMAND_QUEUE_SIZE, sizeof (E_CRADLE_CMD));
      if (gs_CradleCommandQueue == NULL)
      {
          //Queue was not created and must not be used.
      }
}

/** @brief Function to get next command write to cradle
 *  @param [in]  None   
 *  @param [out]  None
 *  @return E_CRADLE_CMD command
 */
E_CRADLE_CMD cradle_GetNextCommand()
{
    E_CRADLE_CMD cmd;
    //check there are any "write data" command in the queue
    if (xQueueReceive(gs_CradleCommandQueue, &cmd, 0) == pdTRUE) //wait 0 tick (do not wait)
    {
        return cmd;
    }
    //if there is no command in the queue, get next command get data
    switch (gs_currentCommand)
    {  
        case eGetCradleSN:
            gs_currentCommand = eGetBatteryConnection;
            break;
            
        case eGetBatteryConnection:
            gs_currentCommand = eGetBatteryRemainingCapacity;
            break;
            
        case eGetBatteryRemainingCapacity:
            gs_currentCommand = eGetBatteryStatus;
            break;
            
        case eGetBatteryStatus:
            gs_currentCommand = eGetBatteryAverageCurrent;
            break;
            
        case eGetBatteryAverageCurrent:
            gs_currentCommand = eGetBatteryVoltage;
            break;
            
        case eGetBatteryVoltage:
            gs_currentCommand = eGetBatteryConnection;
            break;
            
        default:
            gs_currentCommand = eGetBatteryConnection;
            break;
    }
    return gs_currentCommand;                
}

/** @brief Function to wite command to cradle
 *  @param [in]  uint8_t command: command to cradle
 *  @retval true write data success
 *  @retval false write data failed  
 */
bool cradle_WriteCommand(uint8_t command)
{
    bool rtn = true;
    uint8_t buffWrite[10] = {};
    uint8_t size = 0;

    switch (command)
    {
        case eGetCradleSN:
        case eGetBatteryConnection:
        case eGetBatteryRemainingCapacity:
        case eGetBatteryStatus:
        case eGetBatteryAverageCurrent:
        case eGetBatteryVoltage:    
            size = 1;
            buffWrite[0] = command;
            buffWrite[1] = cradle_GetCRC8(buffWrite, size);
            if (I2C2_Write(CRADLE_WRITE_ADDR, 
                        (void*)buffWrite, size+1, CRADLE_COMM_MAX_WAIT_MS) == false)
            {
                  SYS_PRINT("Cradle I2C_2 Write Fail\n");
                  rtn = false;
            } 
            break;
            
        case eSetCradleSN:
//            //data size
//            size = 7;
//            //byte command code
//            buffWrite[0] = command;
//            
//            //bytes data
//            for(idx = 1; idx < (size+1); idx++)
//            {
//               buffWrite[size+1-idx] = ((gs_chamberSerialSetValue/(size+1-idx))%10) & 0xFF;
//            }
//            buffWrite[size+1] = crcChamber_Calculate(&buffWrite[0], size + 1);
//            if (I2C3_Write(CHAMBER_WRITE_ADDR, 
//                  (void*)buffWrite, (size+2) , CHAMBER_COMM_MAX_WAIT_MS) == false)
//            {
//                SYS_PRINT("I2C_3 Chamber SET_CHAMBER_SN_CMD Write Fail\n");
//                rtn =  false;
//            }
//            break;
            break;
        case eSetWaterSupplyOnOff:
        case eSetPowerSupplyOnOff:
            size = 2;
            buffWrite[0] = command;
            if(command == eSetWaterSupplyOnOff){
                buffWrite[1] = gs_WaterSupplyState;
            }
            else{
                buffWrite[1] = eSetPowerSupplyOnOff;
            }
            buffWrite[2] = cradle_GetCRC8(buffWrite, size);
            if (I2C2_Write(CRADLE_WRITE_ADDR, 
                        (void*)buffWrite, size+1, CRADLE_COMM_MAX_WAIT_MS) == false)
            {
                  SYS_PRINT("Cradle I2C_2 Write Fail\n");
                  rtn = false;
            } 
            break;
        default:
            break;
            
    }
    return rtn;      
}

/** @brief Function to read data from Cradle and process it
 *  @param [in]  E_CRADLE_CMD command: process data response of this command
 *  @retval true read data success
 *  @retval false read data failed  
 */
bool cradle_ReadAndProcessReadData(E_CRADLE_CMD command)
{
    uint8_t buffRead[15] = {'\0'};
    uint8_t size = 0;
    bool rtn = true;
    
    switch (command)
    {
        case eGetCradleSN:
            size = CRADLE_SERIAL_NUMBER_LENGTH + 1;
            if(I2C2_Read(CRADLE_READ_ADDR, 
                (void*)buffRead, (size + 1), CRADLE_COMM_MAX_WAIT_MS) == false)
            {            
                SYS_PRINT("Chamber I2C_2 Read Fail\n");
                rtn = false;
            }
            else
            {
                //calculate crc of the data read from cradle
                uint8_t crc = cradle_GetCRC8(buffRead, size);
                //compare crc
                if(crc == buffRead[size])
                {
                    E_CRADLE_ERR status = buffRead[0];
                    
                    if(status == eNoError)
                    {
                        memcpy(gs_CradleSN, &buffRead[1], CRADLE_SERIAL_NUMBER_LENGTH);
                    }
                    else{
                        rtn = false;
                    }
 
                }
                else 
                {
                    SYS_PRINT("eGetCradleSN cradle read data CRC Fail\n");
                }            
            }        
            break;
            
        case eGetBatteryConnection:
            size = 2;
            if(I2C2_Read(CRADLE_READ_ADDR, 
                (void*)buffRead, (size + 1), CRADLE_COMM_MAX_WAIT_MS) == false)
            {            
                SYS_PRINT("Chamber I2C_2 Read Fail\n");
                rtn = false;
            }
            else
            {
                //calculate crc of the data read from cradle
                uint8_t crc = cradle_GetCRC8(buffRead, size);
                //compare crc
                if(crc == buffRead[size])
                {
                    E_CRADLE_ERR status = buffRead[0];
                    
                    if(status == eNoError){
                        gs_CradleBatteryConnection = (E_ConnectState)buffRead[1];                        
                    }
                    else{
                        rtn = false;
                    }
 
                }
                else 
                {
                    SYS_PRINT("eGetBatteryConnection cradle read data CRC Fail\n");
                }            
            }        
            break;
            
        case eGetBatteryRemainingCapacity:
        case eGetBatteryStatus:
        case eGetBatteryAverageCurrent:
        case eGetBatteryVoltage:
            size = 3;
            if(I2C2_Read(CRADLE_READ_ADDR, 
                (void*)buffRead, (size + 1), CRADLE_COMM_MAX_WAIT_MS) == false)
            {            
                SYS_PRINT("Chamber I2C_2 Read Fail\n");
                rtn = false;
            }
            else
            {
                //calculate crc of the data read from cradle
                uint8_t crc = cradle_GetCRC8(buffRead, size);
                //compare crc
                if(crc == buffRead[size])
                {
                    E_CRADLE_ERR status = buffRead[0];
                    if(status == eNoError)
                    {
                        switch (command)
                        {
                            case eGetBatteryRemainingCapacity:
                                gs_CradleBatteryRemainCapacity = (buffRead[1] << 8) + buffRead[2];
                                break;

                            case eGetBatteryStatus:
                                gs_CradleBatteryStatus = (buffRead[1] << 8) + buffRead[2];
                                break;

                            case eGetBatteryAverageCurrent:
                                gs_CradleBatteryAverageCurrent = (int16_t)((buffRead[1] << 8) + buffRead[2]);
                                break;    

                            case eGetBatteryVoltage:
                                gs_CradleBatteryVoltage = (buffRead[1] << 8) + buffRead[2];
                                break;       
                        }                        
                    }
                    else
                    {
                        rtn = false;
                    }
                }
                else 
                {
                    SYS_PRINT("cradle read data CRC Fail\n");
                }            
            }
            break;
        case eSetCradleSN:
        case eSetWaterSupplyOnOff:
        case eSetPowerSupplyOnOff:
            size = 2;
            if(I2C2_Read(CRADLE_READ_ADDR, 
                (void*)buffRead, (size + 1), CRADLE_COMM_MAX_WAIT_MS) == false)
            {            
                SYS_PRINT("cradle I2C_2 Read Fail\n");
                rtn = false;
            }
            else
            {
                //calculate crc of the data read from cradle
                uint8_t crc = cradle_GetCRC8(buffRead, size);
                //compare crc
                if(crc == buffRead[size])
                {
                    E_CRADLE_ERR status = buffRead[0];
                    
                    if(status == eNoError){
                        
                    }
                    else{
                        rtn = false;
                    }
                }
                else 
                {
                    SYS_PRINT("cradle read data CRC Fail\n");
                }            
            }  
          break;
          
        default:
            break;
            
    }
    return rtn;
}

//this function should be called at least every 10ms
void cradle_Run()
{
    static E_CRADLE_CMD command = eGetBatteryConnection;
    static E_CradleRequestState state = eCradleWriteRqst;
    static uint8_t s_ErrorCounter = 0;
    
    float inputVoltage = 0;
    ADC_GetVoltage(ADC_VOLT_INPUT_MONITOR, &inputVoltage);
    //SYS_PRINT("V input %.2f \n", inputVoltage);
    //update connection state of cradle
    if(inputVoltage > 1.0)//TODO
    {
        gs_CradleConnection = eConnect;
    }
    else
    {
        gs_CradleConnection = eDisconnect;
    }
    
    if (gs_CradleConnection == eConnect)
    {
        switch (state)
        {
            case eCradleWriteRqst:
                command = cradle_GetNextCommand();
                if(cradle_WriteCommand(command) == true)
                {
                    state = eCradleReadRqst;
                    s_ErrorCounter = 0;
                }
                else{
                    state = eCradleErrorState;
                }
                break;

            case eCradleReadRqst:
                if (cradle_ReadAndProcessReadData(command) == true){
                    state = eCradleWriteRqst;
                    s_ErrorCounter = 0;
                }
                else{
                   state = eCradleErrorState;
                }
                break;

            case eCradleErrorState:
                s_ErrorCounter++;
                if(s_ErrorCounter >= 3)
                {
                    s_ErrorCounter = 0;
                    gs_communicationErr = eDeviceErrorDetected;
                }
                else
                {
                    //reset cradle
                    state = eCradleWriteRqst;
                }
                                           
                break;

            default:
                break;
        }
    }
                        
}


/** @brief Function to read data from cradle
 *  @param [in]  uint8_t command : command code   
 *  @param [out]  uint16_t *readValue : pointer point to storage reading value
 *  @retval true read data success
 *  @retval false read data failed  
 */
 bool cradle_ReadData(uint8_t command, uint8_t *data, uint32_t dataSize)
{
    uint8_t buffWrite[2] = {'\0'};
    buffWrite[0] = command;
    buffWrite[1] = cradle_GetCRC8(&buffWrite[0], 1);
    
    uint32_t buffReadSize = dataSize +  CRC_NUM_OF_BYTE;
    uint8_t buffRead[buffReadSize];// = {'\0'};

    //write a I2C buffer containing command byte and PEC (crc8) to Smart battery 
    if (I2C2_Write(CRADLE_WRITE_ADDR, 
              (void*)(&buffWrite[0]), sizeof(buffWrite), 
              CRADLE_COMM_MAX_WAIT_MS) == false)
    {
        SYS_PRINT("I2C_2 Write to read Fail\n");
        return false;
    }
    else
    {   
        vTaskDelay(5);
        if(I2C2_Read(CRADLE_READ_ADDR, 
                (void*)&buffRead[0], sizeof(buffRead), 
                CRADLE_COMM_MAX_WAIT_MS) == false)
        {            
            SYS_PRINT("I2C_2 Read Fail\n");
            return false;
        }
        else
        {
            //calculate crc of the data read from smart battery
            uint8_t crc = cradle_GetCRC8(buffRead, sizeof(buffRead)-1);
            //compare crc
            if(crc == buffRead[buffReadSize-1])
            {
                memcpy(data, &buffRead[0], dataSize);
                return true;
            }
            else{
                return false;
            }
        }
    }
   
}

/** @brief Function to write data to cradle
 *  @param [in]  uint8_t command :this is command code   
 *  @param [out]  uint16_t value : the value will be written
 *  @retval true write data success
 *  @retval false write data failed  
 */
//bool cradle_WriteData(uint8_t command, uint8_t* buffer, uint32_t size)
//{
//    uint32_t  sizeOfBuffWrite = size + ADDRESS_NUM_OF_BYTE + COMMAND_NUM_OF_BYTE + CRC_NUM_OF_BYTE;
//    uint8_t buffWrite[sizeOfBuffWrite];
//    //byte address 
//    buffWrite[0] = CRADLE_WRITE_ADDR;
//    //byte command
//    buffWrite[1] = command;
//    //Write Data Bytes
//    memcpy(&buffWrite[2], buffer, size);
//    //crc Byte
//    buffWrite[sizeOfBuffWrite-1] = cradle_GetCRC8(buffWrite, sizeOfBuffWrite-1);
//    
//    if (I2C2_Write(CRADLE_WRITE_ADDR, 
//          (void*)&buffWrite[1], sizeof(buffWrite) -1, CRADLE_COMM_MAX_WAIT_MS) == false)
//    {
//        SYS_PRINT("I2C_2 Write Fail\n");
//        return false;
//    }
//    else{
//        return true;
//    }
//}

/** @brief Function to read error status from cradle every time a command set is send to cradle to check if error occurs 
 *  @param [in]  None  
 *  @param [out] uint8_t* status : pointer point to place error status is store if read success
 *  @retval true if read data success
 *  @retval false if read data failed  
 */
bool cradle_ReadErrorStatus(uint8_t* status)
{
    uint8_t buffRead[3];// = {'\0'};
    buffRead[0] = CRADLE_READ_ADDR;
    if(I2C2_Read(CRADLE_READ_ADDR, 
        (void*)&buffRead[1], sizeof(buffRead)-1, 
          CRADLE_COMM_MAX_WAIT_MS) == false)
    {            
        SYS_PRINT("I2C_2 Read Fail\n");
        return false;
    }
    else
    {
        //calculate crc of the data read from smart battery
        uint8_t crc = cradle_GetCRC8(buffRead, sizeof(buffRead)-1);
        //compare crc
        if(crc == buffRead[2])
        {
            *status = buffRead[1];
            return true;
        }
        else{
            return false;
        }
    }
}

/** @brief Function to set serial Number for Cradle
 *  @param [in]  uint8_t serial : array obtain the serial number, length of array is 10 bytes 
 *  @retval true if write data success
 *  @retval false if write data failed  
 */
bool cradle_SetSerialNumber(uint8_t serial[CRADLE_SERIAL_NUMBER_LENGTH])
{
//    if (cradle_WriteData(eSetCradleSN, serial, CRADLE_SERIAL_NUMBER_LENGTH) == true)
//    {
//        uint8_t status = eNoError;
//        if (cradle_ReadErrorStatus(&status) == true)
//        {
//            if(status == eNoError){
//              return true;
//            }
//            else {
//              return false;
//            }
//        }
//        else{
//            return false;
//        }
//    }
//    else{
//        return false;
//    }
}

/** @brief Function to get serial Number of Cradle
 *  @param [out]  uint8_t* serial :pointer point to place serial is stored if read success 
 *  @param [in]  uint32_t size :size of memory area which stores serial, it must be greater than 10 bytes
 *  @retval true if write data success
 *  @retval false if write data failed  
 */
bool cradle_ReadSerialNumber(uint8_t* serial, uint32_t size)
{
    if(size < CRADLE_SERIAL_NUMBER_LENGTH)
    {
        return false;
    }
    uint8_t length = CRADLE_SERIAL_NUMBER_LENGTH + 1;
    uint8_t data[length];
    if(cradle_ReadData(eGetCradleSN, data, length) == true)
    {
        E_CRADLE_ERR status = data[0];
        if(status == eNoError)
        {
            memcpy(serial, &data[1], CRADLE_SERIAL_NUMBER_LENGTH);
            return true;
        }
        else
        {
          return false;
        }
    }
    else{
        return false;
    }
}

/** @brief Function to get connection status of cradle
 *  @param [out]  None
 *  @retval E_ConnectState connection status of cradle
 */
E_ConnectState cradle_GetCradleConnection()
{    
    return gs_CradleConnection;
}


/** @brief Function to get battery connection status
 *  @param [out]  None
 *  @retval E_ConnectState connection status of battery
 */
E_ConnectState cradle_GetBatteryConnection()
{    
    return gs_CradleBatteryConnection;
}

/** @brief Function to get battery remaining capacity(%)
 *  @param [out] None
 *  @retval uint16_t remaining capacity of battery
 */
uint16_t cradle_GetBatteryRemainingCapacity()
{    
    return gs_CradleBatteryRemainCapacity;
}


/** @brief Function to get battery status
 *  @param [out]  None
 *  @retval uint16_t status of battery
 */
uint16_t cradle_GetBatteryStatus()
{    
    return gs_CradleBatteryStatus;
}


/** @brief Function to get battery average current
 *  @param [in]  None
 *  @param [out]  None
 *  @retval int16_t average current of battery
 */
int16_t cradle_GetBatteryAverageCurrent()
{    
    return gs_CradleBatteryAverageCurrent;
}

/** @brief Function to get battery voltage
 *  @param [in]  None
 *  @param [out]  None
 *  @retval uint16_t voltage of battery
 */
uint16_t cradle_GetBatteryVoltage()
{    
    return gs_CradleBatteryVoltage;
}

/** @brief Function to set Water Supply ON/OFF
 *  @param [in]  E_OnOffState state: state need to set
 *  @retval true if write data success
 *  @retval false if write data failed  
 */
bool cradle_SetWaterSupplyOnOff(E_OnOffState state)
{   
    uint8_t command = eSetWaterSupplyOnOff;
    gs_WaterSupplyState = state;

    if (xQueueSendToBack(gs_CradleCommandQueue, &command, QUEUE_CRADLE_COMMAND_WAITING) != pdPASS)
    {
        xQueueReset(gs_CradleCommandQueue);
        return false;
    }
    return true;
}

/** @brief Function to set Power ON/OFF
 *  @param [in]  E_OnOffState state: state need to set
 *  @retval true if write data success
 *  @retval false if write data failed  
 */
bool cradle_SetPowerSupplyOnOff(E_OnOffState state)
{
    uint8_t command = eSetPowerSupplyOnOff;
    gs_PowerSupplyState = state;

    if (xQueueSendToBack(gs_CradleCommandQueue, &command, QUEUE_CRADLE_COMMAND_WAITING) != pdPASS)
    {
        xQueueReset(gs_CradleCommandQueue);
        return false;
    }
    return true;
}

/** @brief Get current status of cradle communication
*  @param [in]  None 
*  @param [out]  None
*  @return bool
*  @retval true if error, false if not error
*/
bool cradle_IsCommunicationFailure()
{
    if(gs_communicationErr != eDeviceNoError)
    {
        return true;
    }
    else
    {
        return false;
    }
}




/** @brief Function to write value to register */
static bool cradle_MasterSendPing(uint8_t pingType)
{
    bool rtn = false;
    
    txBuf[0] = START_PACKET;
    txBuf[1] = PACKET_TYPE_PING;
    txBuf[2] = pingType;
    txBuf[3] = cradle_CalCulateCRC8(txBuf, 3);

    rtn = I2C2_Write(CRADLE_WRITE_ADDR, (void*)txBuf, 4, CRADLE_COMM_MAX_WAIT_MS);
    return rtn;
}

/** @brief Send command to Slave*/
static bool cradle_MasterSendCommand(uint8_t command)
{
    bool rtn = false;
    txBuf[0] = (uint8_t)START_PACKET;
    txBuf[1] = (uint8_t)PACKET_TYPE_COMMAND;
    txBuf[2] = command;
    txBuf[3] = cradle_CalCulateCRC8(txBuf, 3);
  
    rtn = I2C2_Write(CRADLE_WRITE_ADDR, (void*)txBuf, 4, CRADLE_COMM_MAX_WAIT_MS);
    return rtn;
}

/** @brief Send command to Slave*/
static bool cradle_MasterParseResponse(void)
{
    SYS_PRINT("\n %u, %u, %u, %u", rxBuf[0], rxBuf[1],rxBuf[2],rxBuf[3]);
    if (cradle_CalCulateCRC8(rxBuf, 3) == rxBuf[3]);
//        SYS_PRINT("\n========CRC8 Check Successful=========");
    else {
        SYS_PRINT("\nCRCFail");
        if (MasterState == MASTER_SEND_DATA)
            MasterState = MASTER_RESEND_DATA_SLAVE;
        else if (MasterState == MASTER_RECEIVE_DATA_RESPONSE)
            return true;
        else
            MasterState = PreMasterState;
        
        return true;
    }
    
    if (rxBuf[0] == 0x5A)
    {
        switch(rxBuf[1])
        {
            case PACKET_TYPE_PING_RESPONSE:
            
                if(rxBuf[2] == (uint8_t)IN_BOOT)
                {
                    MasterState = MASTER_PROGRAM_CMD;
//                    MasterState = MASTER_SEND_DATA;
        //            sendPingFlag = false;
                    SYS_PRINT("\nRIboot");
                }
            
                break;
            case PACKET_TYPE_ACK:
            {
                 if (rxBuf[2] == (uint8_t) READY_RECEIVE)
                {
                    // sendDataState = (uint8_t)NEXT_SEND;
                    MasterState = MASTER_SEND_DATA;
                    SYS_PRINT("\nNLINE");

                }
                else if (rxBuf[2] == (uint8_t) STOP_RECEIVE)
                {
                    MasterState = MASTER_STOP_SEND;
                    SYS_PRINT("STRECEIVE");
                }
                if (rxBuf[2] == (uint8_t)RECEIVED_BOOT_CMD)
                {
                    delay_HardDelay(500);
                    MasterState = MASTER_WAIT_BOOT_RESPONSE;
                    SYS_PRINT("\nSSPING");
                }
            }
                break;
            case PACKET_TYPE_NACK:
            {
                if (MasterState == MASTER_RECEIVE_DATA_RESPONSE)
                {
                    MasterState = MASTER_RESEND_DATA_SLAVE;
                    SYS_PRINT("\nRDATA");
                }
                SYS_PRINT("\nResend ");
            }
                break;
            default:
                SYS_PRINT("Unknown Error");
                break;
        }
    }    
}

/** @brief Send command to Slave*/
static uint8_t cradle_SendFirmwareDataPacket(uint8_t* data)
{
    uint8_t transferBytes = 0;  // the number of data will be transfered to cradle
    uint8_t handleBytes = 0;    // the number of data in hex file will be handled 
    uint8_t dataBytes = 0;      // Based on hex file, define number of data
    
    // Handle data in hex file
    if (*(data) == ':') 
    {
        uint8_t tmp1, tmp2;
        dataBytes &= 0x00;
        if (data[1] >= '0' && data[1] <= '9') tmp1 = data[1] - 48;
        else tmp1 = data[1] - 55;
        dataBytes |= tmp1 << 4;
        if (data[2] >= '0' && data[2] <= '9') tmp2 = data[2] - 48;
        else tmp2 = data[2] - 55;                
        dataBytes |= tmp2; 
//		SYS_PRINT("\n dataBytes = %u", dataBytes);										  
        handleBytes  = dataBytes * 2; //--> data bytes
        handleBytes += (1 /*Header*/ + 2/*Data digits*/ + 4/*Address*/ + 2/*Type*/ + 2 /*CRC*/  + 1 /*0x0D*/ + 1 /*0x0A*/) ;
    } 
    else 
    {
        SYS_PRINT("\n Fail data !! Stuck at line");
        return;
    }
    
    transferBytes = dataBytes + 1/*Data digits*/ + 2/*Address*/ + 1/*Type*/ + 1 /*CRC*/;
//    SYS_PRINT("\n transferBytes=%d \tData: ", transferBytes);
    
    uint8_t handledData[50], cnt;
    for (cnt = 0; cnt < transferBytes; cnt++)
    {
        uint8_t highByte = Cradle_Ascii2Hex(*(data + 1 + cnt*2));
        uint8_t lowByte = Cradle_Ascii2Hex(*(data + 1 + cnt*2 + 1));
        handledData[cnt] &= 0x00;
        handledData[cnt] = (highByte << 4) | lowByte;
//        SYS_PRINT("\t%x", handledData[cnt]);
    }
    
    // Transfer data to other device
    uint8_t txBuf[50];
    txBuf[0] = 0x5A;
    txBuf[1] = PACKET_TYPE_DATA;
    memcpy((void*)txBuf + 2, (void*)handledData, transferBytes );
    txBuf[2 + transferBytes] = cradle_CalCulateCRC8(txBuf, transferBytes + 2);
    
    if ( I2C2_Write(CRADLE_WRITE_ADDR, (void*)txBuf, 2 + transferBytes + 1, CRADLE_COMM_MAX_WAIT_MS) == false )
        return 0xFF;

    return handleBytes;
}

/** @brief Function to write value to register 
 *  @param [in]  uint8_t* data : The data was read from hex file 
 *  @param [out]  None
 *  @retval true update data success
 *  @retval false update data failed  
 */
bool cradleFirmwareUpdate_InitFirmware(void)
{
    byteIndex = 0;
    sendBytes = 0;
    
    MasterState = MASTER_SEND_PING;
    PreMasterState = MASTER_SEND_PING; 
    
    memset((void*) txBuf, 0, 27);
    memset((void*) rxBuf, 0, 27);
    
    return true;
}

/** @brief Function to write value to register 
 *  @param [in]  uint8_t* data : The data was read from hex file 
 *  @param [out]  None
 *  @retval true update data success
 *  @retval false update data failed  
 */
bool cradleFirmwareUpdate_UpgradeFirmware(uint8_t* data, uint32_t datalen)
{
//    SYS_PRINT("\nSize: %d",sizeof(data)/sizeof(data[0]));
#define CRADLE_MASTER_DELAY 10
#define CRADLE_CMD_DELAY    0
#define CRADLE_RES_DELAY    0
#define CRADLE_WAIT_ERASE_FLASH 1000
    switch(MasterState)
    { 
        case MASTER_SEND_PING:
            PreMasterState = MasterState;
            if (cradle_MasterSendPing((uint8_t)BOOT)) 
                MasterState = MASTER_RECEIVE_PING_RESPONSE;
            else 
                SYS_PRINT("cPingFalse");
            SYS_PRINT("\nSPing");
            delay_HardDelay(CRADLE_CMD_DELAY);
            break;  
        case MASTER_RECEIVE_PING_RESPONSE:
        {
            delay_HardDelay(10);
            if(I2C2_Read(CRADLE_READ_ADDR, (void*)rxBuf, 4, CRADLE_COMM_MAX_WAIT_MS) == true)
            {  
                cradle_MasterParseResponse();
            }
            delay_HardDelay(CRADLE_RES_DELAY);
            SYS_PRINT("\npResponse");
        }
            break;  
        case MASTER_WAIT_BOOT_RESPONSE:
            delay_HardDelay(500);
            if(I2C2_Read(CRADLE_READ_ADDR, (void*)rxBuf, 4, CRADLE_COMM_MAX_WAIT_MS))
                cradle_MasterParseResponse();
            delay_HardDelay(CRADLE_RES_DELAY);
            SYS_PRINT("\nBResponse");
            break;   
        case MASTER_PROGRAM_CMD:  
            PreMasterState = MasterState;
            if ( cradle_MasterSendCommand((uint8_t)PROGRAM_DEVICE))
                MasterState = MASTER_PROGRAM_CMD_RESPONSE;
            else 
                SYS_PRINT("\nCMDFalse");
            delay_HardDelay(CRADLE_CMD_DELAY);
            break;   
        case MASTER_PROGRAM_CMD_RESPONSE:
          delay_HardDelay(CRADLE_WAIT_ERASE_FLASH);
            if(I2C2_Read(CRADLE_READ_ADDR, (void*)rxBuf, 4, CRADLE_COMM_MAX_WAIT_MS))
                cradle_MasterParseResponse();
//            delay_HardDelay(CRADLE_RES_DELAY);
            break;  
        case MASTER_SEND_DATA:
            PreMasterState = MasterState;
            sendBytes = cradle_SendFirmwareDataPacket(data + byteIndex);

//            SYS_PRINT("\n sendBytes = %u", sendBytes);

            if (sendBytes != 0xFF ) 
            {
                byteIndex += sendBytes;  
                SYS_PRINT("\n byteIndex = %u", byteIndex);
                if (byteIndex >= datalen) delay_HardDelay(100);
                MasterState = MASTER_RECEIVE_DATA_RESPONSE;
            }
            else 
                MasterState =  MASTER_RESEND_DATA_MASTER;
            
            
            delay_HardDelay(CRADLE_MASTER_DELAY);
            break;
        case MASTER_RECEIVE_DATA_RESPONSE:
            if(I2C2_Read(CRADLE_READ_ADDR, (void*)rxBuf, 4, CRADLE_COMM_MAX_WAIT_MS))
            {
                cradle_MasterParseResponse();
//                SYS_PRINT("\nDResponse");
            }
            delay_HardDelay(CRADLE_RES_DELAY);
            break;
        case MASTER_RESEND_DATA_MASTER:
            SYS_PRINT("\nMSDATAMASTER");
            PreMasterState = MasterState;
            sendBytes = cradle_SendFirmwareDataPacket(data + byteIndex);
            if (sendBytes != 0xFF) {
                byteIndex += sendBytes;      
                MasterState = MASTER_RECEIVE_DATA_RESPONSE;
            }
            delay_HardDelay(CRADLE_MASTER_DELAY);
            break;             
        case MASTER_RESEND_DATA_SLAVE:
            SYS_PRINT("\nMSSLAVE");
            PreMasterState = MasterState;
            cradle_SendFirmwareDataPacket(data + byteIndex - sendBytes);
            if (sendBytes != 0xFF)
                MasterState = MASTER_RECEIVE_DATA_RESPONSE;
            delay_HardDelay(CRADLE_MASTER_DELAY);
            break; 
        case MASTER_STOP_SEND: // Return to main program of JFLO
        {
            byteIndex = 0;
            MasterState = 0xFF;
            SYS_PRINT("\n End Transmission");
            delay_MS(500);
            
            return true;
        }
            break; 
        default:
            SYS_PRINT("\n Waitting for new command");
    }    
    
    return false;
}

/** @brief Send command to Slave*/
static uint8_t cradle_CalCulateCRC8( const void *buff, size_t size )
{
	uint8_t *p = (uint8_t *)buff;
	uint8_t crc8;

	for ( crc8 = 0x00 ; size != 0 ; size-- )
	{
		crc8 ^= *p++;

        int i;
		for (i = 0 ; i < 8 ; i++ )
		{
			if ( crc8 & 0x80 )
			{
				crc8 <<= 1; crc8 ^= MSB_CRC8;
			}
			else
			{
				crc8 <<= 1;
			}
		}
	}
	return crc8;
}

/** @brief Send command to Slave*/
static uint8_t Cradle_Ascii2Hex(uint8_t c)
{
	if (c >= '0' && c <= '9')
	{
		return (uint8_t)(c - '0');
	}
	if (c >= 'A' && c <= 'F')
	{
		return (uint8_t)(c - 'A' + 10);
	}
	if (c >= 'a' && c <= 'f')
	{
        return (uint8_t)(c - 'a' + 10);
	}

	return 0;  // this "return" will never be reached, but some compilers give a warning if it is not present
}
/** @file SettingScreen_WifiSetting.h
 *  @brief The interfaces for display wifi setting
 *  @author Trac Truong
 */

#ifndef SETTINGSCREEN_WIFISETTING_H
#define	SETTINGSCREEN_WIFISETTING_H

/* This section lists the other files that are included in this file.
 */
#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdlib.h>

#ifdef UNIT_TEST
    typedef enum laResult_t
    {
        LA_FAILURE = -1,
        LA_SUCCESS = 0
    } laResult;
    typedef enum laBool_t
    {
        LA_FALSE = 0,
        LA_TRUE
    } laBool;
    typedef int laWidget;

    #define SC_MenuSetting_SettingWifi_OffLabel 0
    #define SC_MenuSetting_SettingWifi_OnLabel 1
    #define SC_MenuSetting_SettingWifi_UnderBarPanel 2

    #define SYS_PRINT(...)

    typedef enum laEventID_t
    {
        // internal events
        LA_EVENT_NONE,
        LA_EVENT_SCREEN_CHANGE,
        LA_EVENT_TOUCH_DOWN,
        LA_EVENT_TOUCH_UP,
        LA_EVENT_TOUCH_MOVED
    } laEventID;
    typedef struct laWidgetEvent_t
    {
        laEventID id;
        laWidget* source;
        laWidget* target;
        laBool accepted;
    } laWidgetEvent;

    typedef struct laInput_TouchDownEvent_t
    {
        laWidgetEvent event;
        
        int32_t touchID;
        int32_t x;
        int32_t y;
    } laInput_TouchDownEvent;

    typedef void (*laWidget_TouchDownEvent_FnPtr)(laWidget*, laInput_TouchDownEvent*);

    void laWidget_SetX(laWidget* w, int32_t x);
    laResult laWidget_OverrideTouchDownEvent(laWidget* wgt, laWidget_TouchDownEvent_FnPtr ptr);
    void SettingScreen_SetSettingScreenUpdate(bool f);
#endif

#include "Gui/Setting.h"
#include "Gui/StatusBar.h"
#include "Gui/DisplayControl.h"

/** @brief SettingScreen_WifiSetting_Init
 *      This init data when open the setting
 *  @param [in] None
 *  @param [out] None
 *  @return None
 */
void SettingScreen_WifiSetting_Init();

/** @brief SettingScreen_WifiSetting_Display
 *      This control for display wifi setting
 *  @param [in] None
 *  @param [out] None
 *  @return None
 */
void SettingScreen_WifiSetting_Display();

/** @brief SettingScreen_WifiSetting_SetCallbackFunction
 *      This set callback function for some event that not auto generated by Harmony
 *  @param [in] None
 *  @param [out] None
 *  @return None
 */
void SettingScreen_WifiSetting_SetCallbackFunction(void);

/** @brief SettingScreen_WifiSetting_SetStatus
 *      This function is use to set status for wifi true-ON, false-OFF
 *  @param [in] E_OnOff s
 *  @param [out] None
 *  @return None
 */
void SettingScreen_WifiSetting_SetStatus(E_OnOff s);

/** @brief SettingScreen_WifiSetting_GetStatus
 *      This function is use to get status for wifi true-ON, false-OFF
 *  @param [in] None
 *  @param [out] None
 *  @return E_OnOff
 */
E_OnOff SettingScreen_WifiSetting_GetStatus();

/** @brief SettingScreen_WifiSetting_CheckDataChange
 *      This check if this setting is changed
 *  @param [in] None
 *  @param [out] None
 *  @return None
 */
bool SettingScreen_WifiSetting_CheckDataChange();

/** @brief SettingScreen_WifiSetting_SaveSetting
 *      This save the setting if the setting change
 *  @param [in] None
 *  @param [out] None
 *  @return None
 */
void SettingScreen_WifiSetting_SaveSetting();

/** @brief SettingScreen_WifiSetting_DiscardSetting
 *      This discard the setting change
 *  @param [in] None
 *  @param [out] None
 *  @return None
 */

void SettingScreen_WifiSetting_DiscardSetting();

#endif

/* end of file */
